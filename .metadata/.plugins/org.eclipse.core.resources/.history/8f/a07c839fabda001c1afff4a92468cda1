package test;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import elementos.Coordenada;
import elementos.Jugador;
import elementos.JugadorException;
import elementos.PlayerType;
import logicaJuego.Constantes;
import logicaJuego.Juego;
import logicaJuego.JuegoException;

class TestJuego {


	
	@Test
	public void isTerminada() throws JugadorException {
		PlayerType[] jugadores = new PlayerType[Constantes.NUM_JUGADORES];
		jugadores[0] = PlayerType.MAGO;
		jugadores[1] = PlayerType.ELFO;
		jugadores[2] = PlayerType.OGRO;
		jugadores[3] = PlayerType.GUERRERO;
		Juego j = new Juego(jugadores);
		Coordenada c = j.obtenerCoordenadaJugadorJuega();
		Jugador participante = (Jugador) j.obtenerElementoTableroâ€‹(c);
		participante.setDinero(Constantes.DINERO);

		assertTrue(j.isTerminado());

	}

	@Test
	public void isTerminadoIncorrecto() throws JugadorException {// No se como comprobarlo
		PlayerType[] jugadores = new PlayerType[Constantes.NUM_JUGADORES];
		jugadores[0] = PlayerType.MAGO;
		jugadores[1] = PlayerType.ELFO;
		jugadores[2] = PlayerType.OGRO;
		jugadores[3] = PlayerType.GUERRERO;
		Juego j = new Juego(jugadores);
		assertFalse(j.isTerminado());

	}


	@Test
	public void getNextPositionN() throws JugadorException, JuegoException {
		PlayerType[] jugadores = new PlayerType[Constantes.NUM_JUGADORES];
		jugadores[0] = PlayerType.MAGO;
		jugadores[1] = PlayerType.ELFO;
		jugadores[2] = PlayerType.OGRO;
		jugadores[3] = PlayerType.GUERRERO;
		for (int i = 0; i < 10; i++) {
			Juego j = new Juego(jugadores);

			Coordenada c = j.obtenerCoordenadaJugadorJuega();
			if (c.getY() != 0) {
				j.movePlayer('N');
				c.goUp();
				assertEquals(c, j.obtenerCoordenadaJugadorJuega());
			}
		}

	}

	// MOVER PLAYER S

	@Test
	public void moverS() throws JugadorException, JuegoException {// No se como comprobarlo
		PlayerType[] jugadores = new PlayerType[Constantes.NUM_JUGADORES];
		jugadores[0] = PlayerType.MAGO;
		jugadores[1] = PlayerType.ELFO;
		jugadores[2] = PlayerType.OGRO;
		jugadores[3] = PlayerType.GUERRERO;
		for (int i = 0; i < 10; i++) {
			Juego j = new Juego(jugadores);

			Coordenada c = j.obtenerCoordenadaJugadorJuega();
			if (c.getY() != 9) {
				j.movePlayer('S');
				c.goDown();
				assertEquals(c, j.obtenerCoordenadaJugadorJuega());
			}
		}

	}

	// MOVER PLAYER E

	@Test
	public void moverE() throws JugadorException, JuegoException {// No se como comprobarlo
		PlayerType[] jugadores = new PlayerType[Constantes.NUM_JUGADORES];
		jugadores[0] = PlayerType.MAGO;
		jugadores[1] = PlayerType.ELFO;
		jugadores[2] = PlayerType.OGRO;
		jugadores[3] = PlayerType.GUERRERO;
		for (int i = 0; i < 10; i++) {
			Juego j = new Juego(jugadores);

			Coordenada c = j.obtenerCoordenadaJugadorJuega();
			if (c.getX() != 9) {
				j.movePlayer('E');
				c.goRight();
				assertEquals(c, j.obtenerCoordenadaJugadorJuega());
			}
		}

	}

	// MOVER PLAYER O

	@Test
	public void moverO() throws JugadorException, JuegoException {// No se como comprobarlo
		PlayerType[] jugadores = new PlayerType[Constantes.NUM_JUGADORES];
		jugadores[0] = PlayerType.MAGO;
		jugadores[1] = PlayerType.ELFO;
		jugadores[2] = PlayerType.OGRO;
		jugadores[3] = PlayerType.GUERRERO;
		for (int i = 0; i < 10; i++) {
			Juego j = new Juego(jugadores);

			Coordenada c = j.obtenerCoordenadaJugadorJuega();
			if (c.getX() != 0) {
				j.movePlayer('O');
				c.goLeft();
				assertEquals(c, j.obtenerCoordenadaJugadorJuega());
			}
		}

	}

	// MOVER PLAYER Mal

	@Test
	public void moverError() throws JugadorException {// No se como comprobarlo
		PlayerType[] jugadores = new PlayerType[Constantes.NUM_JUGADORES];
		jugadores[0] = PlayerType.MAGO;
		jugadores[1] = PlayerType.ELFO;
		jugadores[2] = PlayerType.OGRO;
		jugadores[3] = PlayerType.GUERRERO;

		Juego j = new Juego(jugadores);

		Coordenada c = j.obtenerCoordenadaJugadorJuega();

		try {
			j.movePlayer('J');
			fail("Tendria que saltar una exception");
		} catch (JuegoException e) {

			System.out.println("Parametro de movimiento no contemplado");

		}
	}
}
