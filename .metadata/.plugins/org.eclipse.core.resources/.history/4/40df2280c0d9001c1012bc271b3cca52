package test;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import elementos.Jugador;
import elementos.JugadorException;
import elementos.PlayerType;
import logicaJuego.Constantes;

class TestJugador {

	Jugador j1 = new Jugador(PlayerType.ELFO);

	Jugador j2 = new Jugador(PlayerType.GUERRERO);
	Jugador j3 = new Jugador(PlayerType.OGRO);
	Jugador j4 = new Jugador(PlayerType.MAGO);

	@Test
	public void testFuerzaParaLucharElfo() {
		for (int i = 0; i <= 50; i++) {
			Jugador j=new Jugador(PlayerType.ELFO);
			assertTrue(j.getFuerzaParaLuchar() >= 0 && j.getFuerzaParaLuchar() <= Constantes.ELFO_FUERZA);
		}

	}

	@Test
	public void testFuerzaParaLucharOgro() {
		for (int i = 0; i < 50; i++) {
			Jugador j = new Jugador(PlayerType.OGRO);
			assertTrue(j.getFuerzaParaLuchar() >= 0 && j.getFuerzaParaLuchar() <= Constantes.OGRO_FUERZA);
		}
	}

	@Test
	public void testFuerzaParaLucharGuerrero() {
		for (int i = 0; i < 50; i++) {
			Jugador j = new Jugador(PlayerType.GUERRERO);
			assertTrue(j.getFuerzaParaLuchar() >= 0 && j.getFuerzaParaLuchar() <= Constantes.GUERRERO_FUERZA);
		}

	}

	@Test
	public void testFuerzaParaLucharMago() {
		for (int i = 0; i < 50; i++) {
			Jugador j = new Jugador(PlayerType.MAGO);
			assertTrue(j.getFuerzaParaLuchar() >= 0 && j.getFuerzaParaLuchar() <= Constantes.MAGO_FUERZA);
		}

	}

	@Test
	public void testVelocidadParaLucharElfo() {
		for (int i = 0; i <= 50; i++) {
			Jugador j = new Jugador(PlayerType.ELFO);
			assertTrue(j.getVelocidadParaLuchar() >= 0 && j.getVelocidadParaLuchar() <= Constantes.ELFO_VELOCIDAD);
		}

	}

	@Test
	public void testVelocidadParaLucharOgro() {
		for (int i = 0; i <= 50; i++) {
			Jugador j = new Jugador(PlayerType.OGRO);
			assertTrue(j.getVelocidadParaLuchar() >= 0 && j.getVelocidadParaLuchar() <= Constantes.OGRO_VELOCIDAD);
		}

	}

	@Test
	public void testVelocidadParaLucharGuerrero() {
		for (int i = 0; i < 50; i++) {
			Jugador j = new Jugador(PlayerType.GUERRERO);
			assertTrue(j.getVelocidadParaLuchar() >= 0 && j.getVelocidadParaLuchar() <= Constantes.GUERRERO_VELOCIDAD);
		}

	}

	@Test
	public void testVelocidadParaLucharMago() {
		for (int i = 0; i < 50; i++) {
			Jugador j = new Jugador(PlayerType.MAGO);
			assertTrue(j.getVelocidadParaLuchar() >= 0 && j.getVelocidadParaLuchar() <= Constantes.MAGO_VELOCIDAD);
		}

	}

	@Test
	public void testMagiaParaLucharElfo() {
		for (int i = 0; i <= 50; i++) {
			Jugador j = new Jugador(PlayerType.ELFO);
			assertTrue(j.getMagiaParaLuchar() >= 0 && j.getMagiaParaLuchar() <= Constantes.ELFO_MAGIA);
		}
	}

	@Test
	public void testMagiaParaLucharOgro() {
		for (int i = 0; i <= 50; i++) {
			Jugador j = new Jugador(PlayerType.OGRO);
			assertTrue(j.getMagiaParaLuchar() >= 0 && j.getMagiaParaLuchar() <= Constantes.OGRO_MAGIA);
		}

	}

	@Test
	public void testMagiaParaLucharGuerrero() {
		for (int i = 0; i < 50; i++) {
			Jugador j = new Jugador(PlayerType.GUERRERO);
			assertTrue(j.getMagiaParaLuchar() >= 0 && j.getMagiaParaLuchar() <= Constantes.GUERRERO_MAGIA);
		}
	}

	@Test
	public void testMagiaParaLucharMago() {
		for (int i = 0; i < 50; i++) {
			Jugador j = new Jugador(PlayerType.MAGO);
			assertTrue(j.getMagiaParaLuchar() >= 0 && j.getMagiaParaLuchar() <= Constantes.MAGO_MAGIA);
		}
	}

	@Test
	public void setDineroIncorrecto1() {
		Jugador j = new Jugador(PlayerType.MAGO);
		try {
			j.setDinero(3);
			fail("Error si no salta la exception");
		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void setDineroIncorrecto2() {
		Jugador j = new Jugador(PlayerType.MAGO);
		try {
			j.setDinero(-1);
			fail("Error si no salta la exception");
		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void setDineroCorrecto1() {
		Jugador j = new Jugador(PlayerType.MAGO);
		try {
			j.setDinero(2);
			assertEquals(2,j.getDinero());
		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void setDineroCorrecto2() {
		Jugador j = new Jugador(PlayerType.MAGO);
		try {
			j.setDinero(0);
			assertEquals(0,j.getDinero());
		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void setPocionesIncorrecto1() {
		Jugador j = new Jugador(PlayerType.MAGO);
		try {
			j.setPociones(4);
			fail("Error si no salta la exception");
		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void setPocionesIncorrecto2() {
		Jugador j = new Jugador(PlayerType.MAGO);
		try {
			j.setPociones(-1);
			fail("Error si no salta la exception");
		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void setPocionesCorrecto1() {
		Jugador j = new Jugador(PlayerType.MAGO);
		try {
			j.setPociones(3);
			assertEquals(3,j.getPociones());
		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void setPocionesCorrecto2() {
		Jugador j = new Jugador(PlayerType.MAGO);
		try {
			j.setPociones(0);
			assertEquals(0,j.getPociones());

		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void setGemasIncorrecto1() {
		Jugador j = new Jugador(PlayerType.MAGO);

		try {
			j.setGemas(6);
			fail("Error si no salta la exception");
		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}
	@Test
	public void setGemasIncorrecto2() {
		Jugador j = new Jugador(PlayerType.MAGO);

		try {
			j.setGemas(-1);
			fail("Error si no salta la exception");
		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void setGemasCorrecto1() {
		Jugador j = new Jugador(PlayerType.MAGO);
		try {
			j.setGemas(5);
			assertEquals(5,j.getGemas());

		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void setGemasCorrecto2() {
		Jugador j = new Jugador(PlayerType.MAGO);
		try {
			j.setGemas(0);
			assertEquals(0,j.getGemas());

		} catch (JugadorException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void encuentraGema() {
		Jugador j = new Jugador(PlayerType.MAGO);
		j.encuentraGema();
		assertEquals(1, j.getGemas());
	}

	@Test
	public void encuentraDinero() {
		Jugador j = new Jugador(PlayerType.MAGO);
		j.encuentraDinero();
		assertEquals(1, j.getDinero());
	}

	@Test
	public void rompeRocaConGema() {
		// Me creo el jugador para que siempre no tega la misma magia
		for (int i = 0; i < 10; i++) {
			Jugador j = new Jugador(PlayerType.MAGO);
			j.encuentraGema();
			assertEquals(Constantes.ROMPE_ROCA_CON_GEMA, j.encuentraRoca());
		}
	}

	@Test
	public void ganaRocaOPierdeConRoca() {
			int encuentro = j1.encuentraRoca();
			//Lo he puesto asi, porque si encuentro es igual a uno u a otro, pues 
			//la condición es igual de valida
			assertTrue(encuentro == Constantes.GANA_A_LA_ROCA || encuentro == Constantes.PIERDE_A_LA_ROCA);
		}
}
